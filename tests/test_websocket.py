# simple_test_coinmarketcap.py

import asyncio
import httpx
from datetime import datetime

async def test_coinmarketcap_direct():
    """–ü—Ä—è–º–æ–π —Ç–µ—Å—Ç CoinMarketCap API –±–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    API_KEY = "YOUR_API_KEY_HERE"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à API –∫–ª—é—á
    BASE_URL = "https://pro-api.coinmarketcap.com/v1"
    
    headers = {
        "Accept": "application/json",
        "X-CMC_PRO_API_KEY": API_KEY
    }
    
    print("üß™ –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç CoinMarketCap API")
    print("=" * 50)
    
    async with httpx.AsyncClient(timeout=30.0) as client:
        
        # –¢–µ—Å—Ç 1: –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        print("üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏...")
        try:
            response = await client.get(
                f"{BASE_URL}/global-metrics/quotes/latest",
                headers=headers
            )
            
            if response.status_code == 200:
                data = response.json()
                if data.get("status", {}).get("error_code") == 0:
                    global_data = data.get("data", {})
                    quote = global_data.get("quote", {}).get("USD", {})
                    
                    print("‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã:")
                    print(f"   üí∞ –û–±—â–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è: ${quote.get('total_market_cap', 0):,.0f}")
                    print(f"   üìà –û–±—ä–µ–º 24—á: ${quote.get('total_volume_24h', 0):,.0f}")
                    print(f"   ‚Çø BTC –¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: {global_data.get('btc_dominance', 0):.1f}%")
                    print(f"   ‚ü† ETH –¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: {global_data.get('eth_dominance', 0):.1f}%")
                    print(f"   üîó –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç: {global_data.get('active_cryptocurrencies', 0)}")
                else:
                    print(f"‚ùå API –æ—à–∏–±–∫–∞: {data.get('status', {}).get('error_message')}")
            else:
                print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
                print(f"   –û—Ç–≤–µ—Ç: {response.text}")
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        
        print()
        
        # –¢–µ—Å—Ç 2: Fear & Greed Index (–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã)
        print("üò∞ –¢–µ—Å—Ç–∏—Ä—É–µ–º Fear & Greed Index...")
        
        fear_greed_endpoints = [
            "/v3/fear-and-greed/latest",
            "/v1/fear-and-greed/latest",
            "/fear-and-greed/latest"
        ]
        
        fear_greed_found = False
        
        for endpoint in fear_greed_endpoints:
            try:
                print(f"   –ü—Ä–æ–±—É–µ–º: {endpoint}")
                response = await client.get(
                    f"https://pro-api.coinmarketcap.com{endpoint}",
                    headers=headers
                )
                
                if response.status_code == 200:
                    data = response.json()
                    if data.get("status", {}).get("error_code") == 0:
                        print(f"‚úÖ Fear & Greed –Ω–∞–π–¥–µ–Ω –≤ {endpoint}")
                        fg_data = data.get("data", {})
                        print(f"   üò± –ó–Ω–∞—á–µ–Ω–∏–µ: {fg_data.get('value', 'N/A')}")
                        print(f"   üìä –°—Ç–∞—Ç—É—Å: {fg_data.get('value_classification', 'N/A')}")
                        fear_greed_found = True
                        break
                else:
                    print(f"   ‚ö†Ô∏è  HTTP {response.status_code}: {response.text[:100]}")
                    
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        if not fear_greed_found:
            print("‚ùå Fear & Greed Index –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ CMC API")
            print("   –ë—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Alternative.me –∫–∞–∫ fallback")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º Alternative.me
            try:
                response = await client.get("https://api.alternative.me/fng/")
                if response.status_code == 200:
                    data = response.json()
                    fng_data = data.get("data", [])
                    if fng_data:
                        latest = fng_data[0]
                        print(f"‚úÖ Alternative.me Fear & Greed:")
                        print(f"   üò± –ó–Ω–∞—á–µ–Ω–∏–µ: {latest.get('value')}")
                        print(f"   üìä –°—Ç–∞—Ç—É—Å: {latest.get('value_classification')}")
            except Exception as e:
                print(f"‚ùå Alternative.me —Ç–æ–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        
        print()
        
        # –¢–µ—Å—Ç 3: –¢–æ–ø –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –¥–ª—è –∞–ª—å—Ç—Å–µ–∑–æ–Ω–∞
        print("üöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ø –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç...")
        try:
            response = await client.get(
                f"{BASE_URL}/cryptocurrency/listings/latest",
                headers=headers,
                params={"limit": 10, "convert": "USD"}
            )
            
            if response.status_code == 200:
                data = response.json()
                if data.get("status", {}).get("error_code") == 0:
                    cryptos = data.get("data", [])
                    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(cryptos)} –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç:")
                    
                    btc_change = None
                    positive_alts = 0
                    total_alts = 0
                    
                    for crypto in cryptos[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø 5
                        symbol = crypto.get("symbol", "")
                        name = crypto.get("name", "")
                        quote = crypto.get("quote", {}).get("USD", {})
                        price = quote.get("price", 0)
                        change_24h = quote.get("percent_change_24h", 0)
                        
                        print(f"   {symbol:4} ({name[:15]:15}): ${price:8.2f} ({change_24h:+.2f}%)")
                        
                        if symbol == "BTC":
                            btc_change = change_24h
                        elif symbol not in ["USDT", "USDC", "DAI"]:
                            total_alts += 1
                            if change_24h > 0:
                                positive_alts += 1
                    
                    if total_alts > 0:
                        alt_performance = (positive_alts / total_alts) * 100
                        print(f"   üìà –ê–ª—å—Ç–∫–æ–∏–Ω–æ–≤ —Ä–∞—Å—Ç–µ—Ç: {positive_alts}/{total_alts} ({alt_performance:.1f}%)")
                    
                else:
                    print(f"‚ùå API –æ—à–∏–±–∫–∞: {data.get('status', {}).get('error_message')}")
            else:
                print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        
        print("\n" + "=" * 50)
        print("‚ú® –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
        print("\nüí° –ï—Å–ª–∏ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ, –¥–æ–±–∞–≤—å—Ç–µ –≤–∞—à API –∫–ª—é—á –≤ .secrets.toml:")
        print("   coinmarketcap_api_key = \"–≤–∞—à_–∫–ª—é—á_–∑–¥–µ—Å—å\"")

if __name__ == "__main__":
    asyncio.run(test_coinmarketcap_direct())